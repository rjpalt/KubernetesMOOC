# Documentation deployment workflow - OpenAPI specs and coverage reports
name: Deploy Documentation to Pages

on:
  # Runs on           echo "ðŸ“Š Processing coverage reports for docs..."ushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'course_project/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Run tests and generate documentation from results
  test-and-generate-docs:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: test_todoapp
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      # Run tests to generate coverage data
      - name: Run backend tests with coverage
        working-directory: course_project/todo-backend
        env:
          postgres_user: ${{ secrets.TEST_POSTGRES_USER }}
          postgres_password: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          postgres_host: localhost
          postgres_port: 5433
          postgres_db: test_todoapp
        run: |
          echo "ðŸ§ª Running backend tests with coverage..."
          uv sync --group dev
          
          # Set ACT environment variables for local testing
          if [ "${{ github.actor }}" = "nektos/act" ]; then
            echo "postgres_user=${{ secrets.TEST_POSTGRES_USER }}" >> $GITHUB_ENV
            echo "postgres_password=${{ secrets.TEST_POSTGRES_PASSWORD }}" >> $GITHUB_ENV
          fi
          
          # Run tests with coverage
          uv run pytest tests/ --cov=src --cov-report=xml --cov-report=html -v
          
          echo "âœ… Backend tests completed"
      
      - name: Run frontend tests 
        working-directory: course_project/todo-app
        run: |
          echo "ðŸ§ª Running frontend tests..."
          uv sync --group dev
          # Exclude container tests since they require Docker images to be built
          # Generate coverage for documentation
          uv run pytest tests/unit/ tests/integration/ --cov=src --cov-report=xml --cov-report=html -v
          echo "âœ… Frontend tests completed"
      
      # Create documentation structure
      - name: Create documentation structure
        run: |
          mkdir -p docs/{api,coverage,assets}
          mkdir -p docs/api/{todo-app,todo-backend}
          mkdir -p docs/coverage/{backend,frontend,combined}
      
      # Extract OpenAPI specifications by starting services briefly
      - name: Extract OpenAPI specifications
        run: |
          echo "ðŸ“‹ Extracting OpenAPI specifications..."
          
          # Create basic OpenAPI specs as fallback (since services need DB)
          mkdir -p docs/api/todo-backend docs/api/todo-app
          
          # Create minimal backend OpenAPI spec
          cat > docs/api/todo-backend/openapi.json << 'EOF'
          {
            "openapi": "3.1.0",
            "info": {
              "title": "Todo Backend API",
              "description": "Backend API for managing todo items with database persistence",
              "version": "1.0.0"
            },
            "servers": [{"url": "http://localhost:8001"}],
            "paths": {
              "/be-health": {
                "get": {
                  "summary": "Backend Health Check",
                  "responses": {"200": {"description": "Service health status"}}
                }
              },
              "/todos": {
                "get": {
                  "summary": "Get All Todos",
                  "responses": {"200": {"description": "List of todos"}}
                },
                "post": {
                  "summary": "Create Todo",
                  "responses": {"201": {"description": "Todo created"}}
                }
              },
              "/todos/{todo_id}": {
                "get": {
                  "summary": "Get Todo by ID",
                  "parameters": [{"name": "todo_id", "in": "path", "required": true, "schema": {"type": "string"}}],
                  "responses": {"200": {"description": "Todo details"}}
                },
                "put": {
                  "summary": "Update Todo",
                  "parameters": [{"name": "todo_id", "in": "path", "required": true, "schema": {"type": "string"}}],
                  "responses": {"200": {"description": "Todo updated"}}
                },
                "delete": {
                  "summary": "Delete Todo",
                  "parameters": [{"name": "todo_id", "in": "path", "required": true, "schema": {"type": "string"}}],
                  "responses": {"204": {"description": "Todo deleted"}}
                }
              }
            }
          }
          EOF
          
          # Create minimal frontend OpenAPI spec
          cat > docs/api/todo-app/openapi.json << 'EOF'
          {
            "openapi": "3.1.0",
            "info": {
              "title": "Todo Frontend API",
              "description": "Frontend application for the todo microservice",
              "version": "1.0.0"
            },
            "servers": [{"url": "http://localhost:8000"}],
            "paths": {
              "/": {
                "get": {
                  "summary": "Frontend Root",
                  "responses": {"200": {"description": "HTML page"}}
                }
              }
            }
          }
          EOF
          
          echo "âœ… OpenAPI specs created"
      
      # Upload coverage reports to Codecov
      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./course_project/todo-backend/coverage.xml
          flags: backend
          name: todo-backend-coverage
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./course_project/todo-app/coverage.xml
          flags: frontend
          name: todo-frontend-coverage
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Copy coverage reports for documentation
        run: |
          echo "ï¿½ Processing coverage reports..."
          
          # Move coverage files to docs directory
          mkdir -p docs/coverage
          
          # Copy backend coverage files
          if [ -f "course_project/todo-backend/coverage.xml" ]; then
            cp course_project/todo-backend/coverage.xml docs/coverage/backend-coverage.xml
            echo "âœ… Backend coverage report copied"
          fi
          
          if [ -d "course_project/todo-backend/htmlcov" ]; then
            cp -r course_project/todo-backend/htmlcov docs/coverage/backend-html
            echo "âœ… Backend HTML coverage report copied"
          fi
          
          # Copy frontend coverage files
          if [ -f "course_project/todo-app/coverage.xml" ]; then
            cp course_project/todo-app/coverage.xml docs/coverage/frontend-coverage.xml
            echo "âœ… Frontend coverage report copied"
          fi
          
          if [ -d "course_project/todo-app/htmlcov" ]; then
            cp -r course_project/todo-app/htmlcov docs/coverage/frontend-html
            echo "âœ… Frontend HTML coverage report copied"
          fi
          
          echo "âœ… Coverage processing completed"
      
      # Generate documentation site from templates
      - name: Generate documentation site
        run: |
          echo "ðŸ“š Generating documentation site..."
          
          # Download Swagger UI assets
          wget -q https://github.com/swagger-api/swagger-ui/archive/refs/tags/v5.10.3.tar.gz
          tar -xzf v5.10.3.tar.gz
          mkdir -p docs/assets
          cp -r swagger-ui-5.10.3/dist/* docs/assets/
          
          # Copy main index
          cp .github/templates/index.html docs/
          
          # Create API documentation pages
          mkdir -p docs/api/todo-backend docs/api/todo-app
          
          # Backend API docs
          sed 's/{{TITLE}}/Todo Backend API Documentation/' .github/templates/swagger-ui.html > docs/api/todo-backend/index.html
          
          # Frontend API docs  
          sed 's/{{TITLE}}/Todo Frontend API Documentation/' .github/templates/swagger-ui.html > docs/api/todo-app/index.html
          
          echo "âœ… Documentation site generated"
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
