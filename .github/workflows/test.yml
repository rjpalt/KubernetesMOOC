name: Test Pipeline - Microservices

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'course_project/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'course_project/**'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [todo-backend, todo-app]
      fail-fast: true  # Stop all jobs if one quality check fails
    defaults:
      run:
        working-directory: course_project/${{ matrix.service }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.service }}-${{ hashFiles('course_project/${{ matrix.service }}/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.service }}-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --group dev
    
    - name: Check code quality (ruff)
      run: |
        uv run ruff check .
        uv run ruff format --check .

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality  # Only run if quality checks pass
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: test_todoapp
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      postgres_user: ${{ secrets.TEST_POSTGRES_USER }}
      postgres_password: ${{ secrets.TEST_POSTGRES_PASSWORD }}
      postgres_host: localhost
      postgres_port: 5433
      postgres_db: test_todoapp
    defaults:
      run:
        working-directory: course_project/todo-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies  
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-backend-${{ hashFiles('course_project/todo-backend/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-backend-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run backend unit tests
      run: |
        uv run pytest tests/unit/ -v --tb=short
    
    - name: Run backend integration tests
      run: |
        uv run pytest tests/integration/ -v --tb=short
    
    - name: Generate backend coverage
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload backend coverage
      uses: actions/upload-artifact@v4
      if: github.actor != 'nektos/act'  # Skip when running with act locally
      with:
        name: backend-coverage
        path: course_project/todo-backend/coverage.xml

  test-frontend:
    name: Frontend Tests  
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend]  # Frontend depends on backend contract AND quality
    defaults:
      run:
        working-directory: course_project/todo-app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-frontend-${{ hashFiles('course_project/todo-app/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-frontend-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run frontend unit tests (only existing features)
      run: |
        uv run pytest tests/unit/test_models.py -v --tb=short
        uv run pytest tests/unit/test_contracts.py -v --tb=short
        # TODO: Add test_todo_backend_client.py when contracts are finalized
    
    - name: Run frontend integration tests
      run: |
        uv run pytest tests/integration/ -v --tb=short
    
    - name: Generate frontend coverage
      run: |
        uv run pytest tests/unit/test_models.py tests/integration/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload frontend coverage
      uses: actions/upload-artifact@v4
      if: github.actor != 'nektos/act'  # Skip when running with act locally
      with:
        name: frontend-coverage
        path: course_project/todo-app/coverage.xml

  test-microservice-integration:
    name: Service Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend]
    env:
      POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_todoapp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13  
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-backend
        tags: todo-backend:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image  
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-app
        tags: todo-app:test
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test service communication
      run: |
        # Start backend
        docker run -d --name backend-test --network host -e PORT=8001 todo-backend:test
        
        # Wait for backend
        sleep 5
        
        # Test backend is responding
        curl -f http://localhost:8001/be-health || exit 1
        
        # Start frontend (pointing to backend)
        docker run -d --name frontend-test --network host -e PORT=8000 -e TODO_BACKEND_URL=http://localhost:8001 todo-app:test
        
        # Wait for frontend
        sleep 5
        
        # Test frontend health
        curl -f http://localhost:8000/health || exit 1
        
        # TODO: Add more integration tests when contracts are fixed
        
        # Cleanup
        docker stop backend-test frontend-test
        docker rm backend-test frontend-test
