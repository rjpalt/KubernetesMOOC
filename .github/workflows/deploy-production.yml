name: Production Deployment

on:
  # Trigger on PR merges to main (feature branch merges)
  push:
    branches: [ main ]
    paths:
      # Only deploy when actual application code changes
      - 'course_project/todo-backend/**'
      - 'course_project/todo-app/**'
      - 'course_project/todo-cron/**'
  
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

permissions:
  id-token: write  # Required for Azure authentication
  contents: read   # Required for checkout

env:
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
  AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ vars.AKS_RESOURCE_GROUP }}

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for CI completion
      run: |
        echo "Checking if this commit has completed CI pipeline..."
        # We'll verify images exist in the next step instead of waiting for workflow
        echo "Production deployment will verify image availability before proceeding"
    
    - name: Set environment variables
      run: |
        # Use current branch and commit SHA for push events
        BRANCH_NAME="${{ github.ref_name }}"
        COMMIT_SHA="${{ github.sha }}"
        NAMESPACE="project"
        
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
        echo "IMAGE_TAG_SUFFIX=${BRANCH_NAME}-${COMMIT_SHA}" >> $GITHUB_ENV
        
        echo "## Production Deployment 🚀" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${COMMIT_SHA}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`${NAMESPACE}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
    
    - name: Azure Login via Workload Identity
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Connect to AKS cluster
      run: |
        az aks get-credentials \
          --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
          --name ${{ env.AKS_CLUSTER_NAME }}
    
    - name: Verify images exist in registry
      run: |
        echo "Verifying that tested images exist in registry..."
        IMAGE_SUFFIX="${{ env.IMAGE_TAG_SUFFIX }}"
        
        # Check if all required images exist and fail if any are missing
        echo "Checking backend image..."
        BACKEND_TAGS=$(az acr repository show-tags \
          --name $(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d'.' -f1) \
          --repository todo-app-be \
          --query "[?contains(@, '${IMAGE_SUFFIX}')]" \
          --output tsv)
        
        if [ -z "$BACKEND_TAGS" ]; then
          echo "❌ Backend image with tag containing '${IMAGE_SUFFIX}' not found!"
          exit 1
        fi
        
        echo "Checking frontend image..."
        FRONTEND_TAGS=$(az acr repository show-tags \
          --name $(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d'.' -f1) \
          --repository todo-app-fe \
          --query "[?contains(@, '${IMAGE_SUFFIX}')]" \
          --output tsv)
        
        if [ -z "$FRONTEND_TAGS" ]; then
          echo "❌ Frontend image with tag containing '${IMAGE_SUFFIX}' not found!"
          exit 1
        fi
        
        echo "Checking cron image..."
        CRON_TAGS=$(az acr repository show-tags \
          --name $(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d'.' -f1) \
          --repository todo-app-cron \
          --query "[?contains(@, '${IMAGE_SUFFIX}')]" \
          --output tsv)
        
        if [ -z "$CRON_TAGS" ]; then
          echo "❌ Cron image with tag containing '${IMAGE_SUFFIX}' not found!"
          exit 1
        fi
        
        echo "✅ All tested images found in registry:"
        echo "  - Backend: $BACKEND_TAGS"
        echo "  - Frontend: $FRONTEND_TAGS"
        echo "  - Cron: $CRON_TAGS"
    
    - name: Deploy to production
      run: |
        cd course_project/manifests/overlays/production
        
        # Set the tested image tags
        kustomize edit set image \
          ${{ env.ACR_LOGIN_SERVER }}/todo-app-be=${{ env.ACR_LOGIN_SERVER }}/todo-app-be:${{ env.IMAGE_TAG_SUFFIX }} \
          ${{ env.ACR_LOGIN_SERVER }}/todo-app-fe=${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:${{ env.IMAGE_TAG_SUFFIX }} \
          ${{ env.ACR_LOGIN_SERVER }}/todo-app-cron=${{ env.ACR_LOGIN_SERVER }}/todo-app-cron:${{ env.IMAGE_TAG_SUFFIX }}
        
        # Apply the manifests to production namespace
        kustomize build . | kubectl apply -f -
        
        echo "✅ Production deployment applied to project namespace"
    
    - name: Wait for deployments
      run: |
        echo "Waiting for deployments to be ready..."
        
        # Wait for PostgreSQL StatefulSet first (database dependency)
        echo "Waiting for PostgreSQL StatefulSet..."
        kubectl rollout status statefulset/postgres-statefulset -n ${{ env.NAMESPACE }} --timeout=600s
        echo "✅ PostgreSQL ready"
        
        # Use deployment rollout status instead of individual pod waits
        # This avoids race conditions with terminating pods during rolling updates
        kubectl rollout status deployment/todo-app-be -n ${{ env.NAMESPACE }} --timeout=300s
        echo "✅ Backend deployment ready"
        
        kubectl rollout status deployment/todo-app-fe -n ${{ env.NAMESPACE }} --timeout=300s
        echo "✅ Frontend deployment ready"
        
        echo "✅ All deployments ready"
    
    - name: Verify production health
      run: |
        echo "Verifying production environment health..."
        
        # Get service information
        kubectl get services -n ${{ env.NAMESPACE }} -o wide
        
        # Find a ready backend pod using field selector (avoids terminating pods)
        echo "Finding ready backend pod..."
        BACKEND_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=todo-app-be --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
        
        if [ -z "$BACKEND_POD" ]; then
          echo "No running backend pods found, waiting briefly..."
          sleep 10
          BACKEND_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=todo-app-be --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
        fi
        
        echo "Found backend pod: $BACKEND_POD"
        
        # Test backend health with port-forward to the correct port
        echo "Testing backend health..."
        kubectl port-forward -n ${{ env.NAMESPACE }} pod/$BACKEND_POD 8001:8001 &
        PORT_FORWARD_PID=$!
        sleep 5
        
        if curl -f --max-time 10 http://localhost:8001/be-health; then
          echo "✅ Backend health check passed"
        else
          echo "❌ Backend health check failed, trying alternative port configuration..."
          kill $PORT_FORWARD_PID 2>/dev/null || true
          
          # Try port 2506 (service port) in case container was configured differently
          echo "Trying port-forward to 8002:2506..."
          kubectl port-forward -n ${{ env.NAMESPACE }} pod/$BACKEND_POD 8002:2506 &
          PORT_FORWARD_PID=$!
          sleep 5
          
          if curl -f --max-time 10 http://localhost:8002/be-health; then
            echo "✅ Backend health check passed on port 2506"
          else
            echo "❌ Backend health check failed on both ports"
            kill $PORT_FORWARD_PID 2>/dev/null || true
            exit 1
          fi
        fi
        
        kill $PORT_FORWARD_PID 2>/dev/null || true
        
        # Find a ready frontend pod using field selector
        echo "Finding ready frontend pod..."
        FRONTEND_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=todo-app-fe --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
        
        if [ -z "$FRONTEND_POD" ]; then
          echo "No running frontend pods found, waiting briefly..."
          sleep 10
          FRONTEND_POD=$(kubectl get pods -n ${{ env.NAMESPACE }} -l app=todo-app-fe --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
        fi
        
        echo "Found frontend pod: $FRONTEND_POD"
        
        # Test frontend health with port-forward
        echo "Testing frontend health..."
        kubectl port-forward -n ${{ env.NAMESPACE }} pod/$FRONTEND_POD 8000:8000 &
        PORT_FORWARD_PID=$!
        sleep 5
        
        if curl -f --max-time 10 http://localhost:8000/health; then
          echo "✅ Frontend health check passed"
        else
          echo "❌ Frontend health check failed, trying alternative port configuration..."
          kill $PORT_FORWARD_PID 2>/dev/null || true
          
          # Try port 2507 (service port) in case container was configured differently
          echo "Trying port-forward to 8003:2507..."
          kubectl port-forward -n ${{ env.NAMESPACE }} pod/$FRONTEND_POD 8003:2507 &
          PORT_FORWARD_PID=$!
          sleep 5
          
          if curl -f --max-time 10 http://localhost:8003/health; then
            echo "✅ Frontend health check passed on port 2507"
          else
            echo "❌ Frontend health check failed on both ports"
            kill $PORT_FORWARD_PID 2>/dev/null || true
            exit 1
          fi
        fi
        
        kill $PORT_FORWARD_PID 2>/dev/null || true
        echo "✅ All health checks passed"
    
    - name: Verify CronJobs deployed
      run: |
        echo "Checking CronJob deployments..."
        kubectl get cronjobs -n ${{ env.NAMESPACE }} -o wide
        
        # Check if our backup CronJob exists
        if kubectl get cronjob todo-backup-cronjob -n ${{ env.NAMESPACE }} &>/dev/null; then
          echo "✅ Backup CronJob deployed successfully"
          kubectl describe cronjob todo-backup-cronjob -n ${{ env.NAMESPACE }}
        else
          echo "❌ Backup CronJob not found"
          exit 1
        fi
        
        # Check if original CronJob exists
        if kubectl get cronjob todo-cronjob -n ${{ env.NAMESPACE }} &>/dev/null; then
          echo "✅ Wikipedia CronJob deployed successfully"
        else
          echo "❌ Wikipedia CronJob not found"
          exit 1
        fi
    
    - name: Generate deployment summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployment Results 📊" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Image |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | ✅ Deployed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-be:${{ env.IMAGE_TAG_SUFFIX }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | ✅ Deployed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:${{ env.IMAGE_TAG_SUFFIX }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Cron | ✅ Deployed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-cron:${{ env.IMAGE_TAG_SUFFIX }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Production Access 🌐" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`${{ env.NAMESPACE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Production URL:** http://d9hqaucbbyazhfem.fz53.alb.azure.com/" >> $GITHUB_STEP_SUMMARY
        echo "**Backend Health:** http://d9hqaucbbyazhfem.fz53.alb.azure.com/be-health" >> $GITHUB_STEP_SUMMARY
        echo "**API Docs:** http://d9hqaucbbyazhfem.fz53.alb.azure.com/docs/" >> $GITHUB_STEP_SUMMARY
        echo "**Health Checks:** ✅ All services responding" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Deployed Services 🔧" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend API (todo-app-be)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend Web App (todo-app-fe)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Wikipedia CronJob (daily todos)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Database Backup CronJob (Azure Blob Storage)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ PostgreSQL Database (persistent storage)" >> $GITHUB_STEP_SUMMARY