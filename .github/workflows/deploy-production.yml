name: Production Deployment - Todo Application

on:
  push:
    branches: [ main ]
    paths:
      - 'course_project/**'

permissions:
  id-token: write  # This permission allows GitHub Actions to request and write OIDC tokens
  contents: read   # Required for checkout

env:
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
  AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ vars.AKS_RESOURCE_GROUP }}

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for comparison

      - name: Detect changes
        id: changes
        run: |
          # Check if backend files changed
          if git diff --name-only HEAD~1 HEAD | grep -q "^course_project/todo-backend/"; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          # Check if frontend files changed (corrected path)
          if git diff --name-only HEAD~1 HEAD | grep -q "^course_project/todo-app/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_POSTGRES_DB }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    defaults:
      run:
        working-directory: course_project/todo-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      
      - name: Install dependencies
        run: uv sync --group dev
      
      - name: Run backend tests
        env:
          postgres_user: ${{ secrets.TEST_POSTGRES_USER }}
          postgres_password: ${{ secrets.TEST_POSTGRES_PASSWORD }}
          postgres_host: localhost
          postgres_port: 5433
          postgres_db: ${{ secrets.TEST_POSTGRES_DB }}
        run: uv run pytest tests/ -v

  build-push-backend:
    name: Build and Push Backend
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login via Workload Identity
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to ACR
        run: az acr login --name $(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d'.' -f1)
      
      - name: Form the image tag
        run: |
          echo "IMAGE_TAG=${{ env.ACR_LOGIN_SERVER }}/todo-app-be:main-${{ github.sha }}" >> $GITHUB_ENV
      
      - name: Build and push backend image
        run: |
          docker build --platform linux/amd64 \
            -t ${{ env.IMAGE_TAG }} \
            course_project/todo-backend/
          docker push ${{ env.IMAGE_TAG }}
          echo "Backend image pushed: ${{ env.IMAGE_TAG }}"

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    defaults:
      run:
        working-directory: course_project/todo-app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      
      - name: Install dependencies
        run: uv sync --group dev
      
      - name: Run frontend tests
        run: |
          uv run pytest tests/unit/ -v --tb=short
          uv run pytest tests/integration/ -v --tb=short

  build-push-frontend:
    name: Build and Push Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login via Workload Identity
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Login to ACR
        run: az acr login --name $(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d'.' -f1)
      
      - name: Build and push frontend image
        run: |
          FRONTEND_IMAGE_TAG="${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:main-${{ github.sha }}"
          docker build --platform linux/amd64 \
            -t $FRONTEND_IMAGE_TAG \
            course_project/todo-app/
          docker push $FRONTEND_IMAGE_TAG
          echo "Frontend image pushed: $FRONTEND_IMAGE_TAG"

  deploy-backend:
    name: Deploy Backend to AKS
    runs-on: ubuntu-latest
    needs: [detect-changes, build-push-backend]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login via Workload Identity
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Connect to AKS cluster
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }}
      
      - name: Update backend image in manifests
        run: |
          cd course_project/manifests/base/todo-be
          # Update the image tag in the deployment
          NEW_IMAGE="${{ env.ACR_LOGIN_SERVER }}/todo-app-be:main-${{ github.sha }}"
          kustomize edit set image ${{ env.ACR_LOGIN_SERVER }}/todo-app-be=$NEW_IMAGE
          echo "Updated backend image to: $NEW_IMAGE"
      
      - name: Deploy backend to AKS
        run: |
          cd course_project/manifests/base/todo-be
          kubectl apply -k .
          echo "Backend deployment applied"
      
      - name: Wait for backend deployment rollout
        run: |
          kubectl rollout status deployment/todo-app-be -n project --timeout=300s
          echo "Backend deployment completed successfully"
      
      - name: Verify backend health
        run: |
          echo "Verifying backend health..."
          
          # Get service information
          kubectl get services -n project -o wide
          
          # Find a ready backend pod using field selector (avoids terminating pods)
          echo "Finding ready backend pod..."
          BACKEND_POD=$(kubectl get pods -n project -l app=todo-app-be --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$BACKEND_POD" ]; then
            echo "No running backend pods found, waiting briefly..."
            sleep 10
            BACKEND_POD=$(kubectl get pods -n project -l app=todo-app-be --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          fi
          
          echo "Found backend pod: $BACKEND_POD"
          
          # Debug: Check what's actually running in the backend pod
          echo "Debugging backend pod configuration..."
          kubectl describe pod $BACKEND_POD -n project
          echo "Checking backend pod logs..."
          kubectl logs $BACKEND_POD -n project --tail=20
          echo "Checking if backend is listening on expected ports..."
          kubectl exec $BACKEND_POD -n project -- netstat -tlnp 2>/dev/null || kubectl exec $BACKEND_POD -n project -- ss -tlnp 2>/dev/null || echo "netstat/ss not available"
          
          # Test backend health with port-forward to the correct port
          echo "Testing backend health..."
          kubectl port-forward -n project pod/$BACKEND_POD 8001:2506 &
          PORT_FORWARD_PID=$!
          sleep 5
          
          if curl -f --max-time 10 http://localhost:8001/be-health; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed, trying alternative ports..."
            kill $PORT_FORWARD_PID 2>/dev/null || true
            
            # Try port 8001 (common local development port)
            echo "Trying port-forward to 8001:8001..."
            kubectl port-forward -n project pod/$BACKEND_POD 8002:8001 &
            PORT_FORWARD_PID=$!
            sleep 5
            
            if curl -f --max-time 10 http://localhost:8002/be-health; then
              echo "✅ Backend health check passed on port 8001"
            else
              echo "❌ Backend health check failed on both ports"
              kill $PORT_FORWARD_PID 2>/dev/null || true
              exit 1
            fi
          fi
          
          kill $PORT_FORWARD_PID 2>/dev/null || true
          echo "✅ Backend health check completed"

  deploy-frontend:
    name: Deploy Frontend to AKS
    runs-on: ubuntu-latest
    needs: [detect-changes, build-push-frontend]
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure Login via Workload Identity
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Connect to AKS cluster
        run: |
          az aks get-credentials \
            --resource-group ${{ env.AKS_RESOURCE_GROUP }} \
            --name ${{ env.AKS_CLUSTER_NAME }}
      
      - name: Update frontend image in manifests
        run: |
          cd course_project/manifests/base/todo-fe
          # Update the image tag in the deployment
          NEW_IMAGE="${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:main-${{ github.sha }}"
          kustomize edit set image ${{ env.ACR_LOGIN_SERVER }}/todo-app-fe=$NEW_IMAGE
          echo "Updated frontend image to: $NEW_IMAGE"
      
      - name: Deploy frontend to AKS
        run: |
          cd course_project/manifests/base/todo-fe
          kubectl apply -k .
          echo "Frontend deployment applied"
      
      - name: Wait for frontend deployment rollout
        run: |
          kubectl rollout status deployment/todo-app-fe -n project --timeout=300s
          echo "Frontend deployment completed successfully"
      
      - name: Verify frontend health
        run: |
          echo "Verifying frontend health..."
          
          # Get service information
          kubectl get services -n project -o wide
          
          # Find a ready frontend pod using field selector (avoids terminating pods)
          echo "Finding ready frontend pod..."
          FRONTEND_POD=$(kubectl get pods -n project -l app=todo-app-fe --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          
          if [ -z "$FRONTEND_POD" ]; then
            echo "No running frontend pods found, waiting briefly..."
            sleep 10
            FRONTEND_POD=$(kubectl get pods -n project -l app=todo-app-fe --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          fi
          
          echo "Found frontend pod: $FRONTEND_POD"
          
          # Debug: Check what's actually running in the frontend pod
          echo "Debugging frontend pod configuration..."
          kubectl describe pod $FRONTEND_POD -n project
          echo "Checking frontend pod logs..."
          kubectl logs $FRONTEND_POD -n project --tail=20
          
          # Test frontend health with port-forward
          echo "Testing frontend health..."
          kubectl port-forward -n project pod/$FRONTEND_POD 8000:2507 &
          PORT_FORWARD_PID=$!
          sleep 5
          
          if curl -f --max-time 10 http://localhost:8000/health; then
            echo "✅ Frontend health check passed"
          else
            echo "❌ Frontend health check failed, trying alternative ports..."
            kill $PORT_FORWARD_PID 2>/dev/null || true
            
            # Try port 8000 (common local development port)
            echo "Trying port-forward to 8000:8000..."
            kubectl port-forward -n project pod/$FRONTEND_POD 8003:8000 &
            PORT_FORWARD_PID=$!
            sleep 5
            
            if curl -f --max-time 10 http://localhost:8003/health; then
              echo "✅ Frontend health check passed on port 8000"
            else
              echo "❌ Frontend health check failed on both ports"
              kill $PORT_FORWARD_PID 2>/dev/null || true
              exit 1
            fi
          fi
          
          kill $PORT_FORWARD_PID 2>/dev/null || true
          echo "✅ Frontend health check completed"

  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-backend, deploy-frontend]
    if: always() && needs.detect-changes.result == 'success'
    
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Status | Image Tag |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Backend summary
          if [[ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]]; then
            if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
              echo "| Backend | ✅ Deployed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-be:main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Backend | ❌ Failed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-be:main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Backend | ⏭️ No changes | Current image |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Frontend summary
          if [[ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]]; then
            if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
              echo "| Frontend | ✅ Deployed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Frontend | ❌ Failed | \`${{ env.ACR_LOGIN_SERVER }}/todo-app-fe:main-${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| Frontend | ⏭️ No changes | Current image |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** \`${{ github.actor }}\`" >> $GITHUB_STEP_SUMMARY