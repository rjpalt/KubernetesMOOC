name: CI Pipeline - Microservices

on:
  pull_request:
    branches: [ main ]
    paths:
      # Only trigger on meaningful code changes that require rebuilds
      - 'course_project/todo-backend/src/**'
      - 'course_project/todo-backend/Dockerfile'
      - 'course_project/todo-backend/pyproject.toml'
      - 'course_project/todo-backend/uv.lock'
      - 'course_project/todo-backend/init.sql'
      - 'course_project/todo-app/src/**'
      - 'course_project/todo-app/Dockerfile'
      - 'course_project/todo-app/pyproject.toml'
      - 'course_project/todo-app/uv.lock'
      - 'course_project/todo-app/templates/**'
      - 'course_project/todo-app/openapi.yaml'
      - 'course_project/todo-cron/Dockerfile'
      - 'course_project/todo-cron/create_wikipedia_todo.sh'
      - 'course_project/todo-cron/backup_database.sh'
      - 'course_project/broadcaster/src/**'
      - 'course_project/broadcaster/Dockerfile'
      - 'course_project/broadcaster/pyproject.toml'
      - 'course_project/broadcaster/uv.lock'

permissions:
  id-token: write  # Required for Azure authentication
  contents: read   # Required for checkout

env:
  ACR_LOGIN_SERVER: kubemooc.azurecr.io
  REGISTRY: kubemooc.azurecr.io

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [todo-backend, todo-app, broadcaster]
      fail-fast: true  # Stop all jobs if one quality check fails
    defaults:
      run:
        working-directory: course_project/${{ matrix.service }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-${{ matrix.service }}-${{ hashFiles('course_project/${{ matrix.service }}/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.service }}-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --group dev
    
    - name: Check code quality (ruff)
      run: |
        uv run ruff check .
        uv run ruff format --check .

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality  # Only run if quality checks pass
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: test_todoapp
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      postgres_user: ${{ secrets.TEST_POSTGRES_USER }}
      postgres_password: ${{ secrets.TEST_POSTGRES_PASSWORD }}
      postgres_host: localhost
      postgres_port: 5433
      postgres_db: test_todoapp
    defaults:
      run:
        working-directory: course_project/todo-backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies  
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-backend-${{ hashFiles('course_project/todo-backend/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-backend-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Set ACT environment variables
      if: github.actor == 'nektos/act'
      run: |
        echo "postgres_user=${{ secrets.TEST_POSTGRES_USER }}" >> $GITHUB_ENV
        echo "postgres_password=${{ secrets.TEST_POSTGRES_PASSWORD }}" >> $GITHUB_ENV
        echo "postgres_host=localhost" >> $GITHUB_ENV
        echo "postgres_port=5433" >> $GITHUB_ENV
        echo "postgres_db=test_todoapp" >> $GITHUB_ENV
    
    - name: Run backend unit tests
      run: |
        uv run pytest tests/unit/ -v --tb=short
    
    - name: Run backend integration tests
      run: |
        uv run pytest tests/integration/ -v --tb=short
    
    - name: Generate backend coverage
      run: |
        uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload backend coverage
      uses: actions/upload-artifact@v4
      if: github.actor != 'nektos/act'  # Skip when running with act locally
      with:
        name: backend-coverage
        path: course_project/todo-backend/coverage.xml

  test-frontend:
    name: Frontend Tests  
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend]  # Frontend depends on backend contract AND quality
    defaults:
      run:
        working-directory: course_project/todo-app
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-frontend-${{ hashFiles('course_project/todo-app/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-frontend-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: |
        uv sync --group dev
    
    - name: Run frontend unit tests (only existing features)
      run: |
        uv run pytest tests/unit/test_models.py -v --tb=short
        uv run pytest tests/unit/test_contracts.py -v --tb=short
        # TODO: Add test_todo_backend_client.py when contracts are finalized
    
    - name: Run frontend integration tests
      run: |
        uv run pytest tests/integration/ -v --tb=short
    
    - name: Generate frontend coverage
      run: |
        uv run pytest tests/unit/test_models.py tests/integration/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload frontend coverage
      uses: actions/upload-artifact@v4
      if: github.actor != 'nektos/act'  # Skip when running with act locally
      with:
        name: frontend-coverage
        path: course_project/todo-app/coverage.xml

  test-broadcaster:
    name: Broadcaster Tests
    runs-on: ubuntu-latest
    needs: code-quality  # Run after quality checks pass
    env:
      WEBHOOK_URL: https://httpbin.org/post  # Required for broadcaster tests
    defaults:
      run:
        working-directory: course_project/broadcaster
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-uv-broadcaster-${{ hashFiles('course_project/broadcaster/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-broadcaster-
          ${{ runner.os }}-uv-
    
    - name: Install dependencies
      run: uv sync --group dev
    
    - name: Run broadcaster unit tests
      run: uv run pytest tests/unit/ -v --tb=short
    
    - name: Run broadcaster integration tests
      run: uv run pytest tests/integration/ -v --tb=short
    
    - name: Generate broadcaster coverage
      run: uv run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload broadcaster coverage
      uses: actions/upload-artifact@v4
      if: github.actor != 'nektos/act'  # Skip when running with act locally
      with:
        name: broadcaster-coverage
        path: course_project/broadcaster/coverage.xml

  test-microservice-integration:
    name: Service Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend, test-broadcaster]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: test_todoapp
          POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      POSTGRES_USER: ${{ secrets.TEST_POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.TEST_POSTGRES_PASSWORD }}
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5433
      POSTGRES_DB: test_todoapp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.13  
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and cache backend image
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-backend
        tags: |
          todo-backend:test
          ${{ env.REGISTRY }}/todo-app-be:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        load: true  # Load to local Docker for testing
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and cache frontend image  
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-app
        tags: |
          todo-app:test
          ${{ env.REGISTRY }}/todo-app-fe:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        load: true  # Load to local Docker for testing
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test service communication
      run: |
        # Start backend with database environment variables
        docker run -d --name backend-test --network host \
          -e PORT=8001 \
          -e POSTGRES_HOST=localhost \
          -e POSTGRES_PORT=5433 \
          -e POSTGRES_DB=test_todoapp \
          -e POSTGRES_USER="${{ secrets.TEST_POSTGRES_USER }}" \
          -e POSTGRES_PASSWORD="${{ secrets.TEST_POSTGRES_PASSWORD }}" \
          todo-backend:test
        
        # Wait for backend startup and health check
        echo "Waiting for backend to start..."
        for i in {1..30}; do
          if curl -s http://localhost:8001/be-health; then
            echo "Backend is healthy!"
            break
          fi
          echo "Attempt $i: Backend not ready yet..."
          sleep 2
        done
        
        # Verify backend is responding
        curl -f http://localhost:8001/be-health || exit 1
        
        # Start frontend (pointing to backend)
        docker run -d --name frontend-test --network host \
          -e PORT=8000 \
          -e TODO_BACKEND_URL=http://localhost:8001 \
          todo-app:test
        
        # Wait for frontend startup
        echo "Waiting for frontend to start..."
        for i in {1..20}; do
          if curl -s http://localhost:8000/health; then
            echo "Frontend is healthy!"
            break
          fi
          echo "Attempt $i: Frontend not ready yet..."
          sleep 2
        done
        
        # Verify frontend is responding
        curl -f http://localhost:8000/health || exit 1
        
        echo "Integration test passed: Both services are communicating!"
        
        # Cleanup
        docker stop backend-test frontend-test
        docker rm backend-test frontend-test

  build-and-push-images:
    name: Push Tested Images to ACR
    runs-on: ubuntu-latest
    needs: [code-quality, test-backend, test-frontend, test-broadcaster, test-microservice-integration]
    if: github.actor != 'nektos/act'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login via Workload Identity
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CI_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Login to ACR
      run: az acr login --name kubemooc
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Push tested backend image to ACR
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-backend
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/todo-app-be:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        cache-from: type=gha  # Reuse the exact same build from test job
        cache-to: type=gha,mode=max
    
    - name: Push tested frontend image to ACR
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-app
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/todo-app-fe:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        cache-from: type=gha  # Reuse the exact same build from test job
        cache-to: type=gha,mode=max

    - name: Push cron image to ACR
      uses: docker/build-push-action@v5
      with:
        context: course_project/todo-cron
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/todo-app-cron:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        cache-from: type=gha  # Reuse the exact same build from test job
        cache-to: type=gha,mode=max

    - name: Push broadcaster image to ACR
      uses: docker/build-push-action@v5
      with:
        context: course_project/broadcaster
        platforms: linux/amd64
        push: true
        tags: ${{ env.REGISTRY }}/broadcaster:${{ github.head_ref || github.ref_name }}-${{ github.event.pull_request.head.sha || github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Image build summary
      run: |
        BRANCH_NAME=${{ github.head_ref || github.ref_name }}
        HEAD_SHA=${{ github.event.pull_request.head.sha || github.sha }}
        echo "## Successfully Built and Pushed Images 🐳" >> $GITHUB_STEP_SUMMARY
        echo "| Service | Image Tag |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend | \`${{ env.REGISTRY }}/todo-app-be:${BRANCH_NAME}-${HEAD_SHA}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend | \`${{ env.REGISTRY }}/todo-app-fe:${BRANCH_NAME}-${HEAD_SHA}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Cron | \`${{ env.REGISTRY }}/todo-app-cron:${BRANCH_NAME}-${HEAD_SHA}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Broadcaster | \`${{ env.REGISTRY }}/broadcaster:${BRANCH_NAME}-${HEAD_SHA}\` |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit (PR head):** \`${HEAD_SHA}\`" >> $GITHUB_STEP_SUMMARY
        echo "**All tests passed before building these images** ✅" >> $GITHUB_STEP_SUMMARY
