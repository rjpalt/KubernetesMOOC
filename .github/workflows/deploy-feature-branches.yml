name: Feature Branch Deployment

# NOTE: The deployed feature hostname uses the branch name directly (no leading
# "feature-" namespace prefix). Example for branch `ex-c3-e9`:
#   http://ex-c3-e9.23.98.101.23.nip.io/


on:
  workflow_run:
    workflows: ["CI Pipeline - Microservices"]
    types: [completed]

permissions:
  id-token: write    # Required for Azure authentication
  contents: read     # Required for checkout
  pull-requests: write # Required for commenting on PRs

env:
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
  AKS_CLUSTER_NAME: ${{ vars.AKS_CLUSTER_NAME }}
  AKS_RESOURCE_GROUP: ${{ vars.AKS_RESOURCE_GROUP }}
  MANAGED_IDENTITY: ${{ vars.MANAGED_IDENTITY }}

jobs:
  deploy-feature-environment:
    name: Deploy Feature Environment
    runs-on: ubuntu-latest
    # Only run when CI succeeded AND the source (head) branch is not main
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.head_branch != 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # CRITICAL: Checkout the exact same commit that triggered the CI pipeline
        # This ensures we deploy manifests that match the tested images
        ref: ${{ github.event.workflow_run.head_sha }}
    
    - name: Set environment variables
      run: |
        # Use the same branch and commit SHA as the triggering CI pipeline
        # This ensures image tags match: {branch}-{sha}
        BRANCH_NAME="${{ github.event.workflow_run.head_branch }}"
        COMMIT_SHA="${{ github.event.workflow_run.head_sha }}"
        NAMESPACE="feature-${BRANCH_NAME}"
        
        echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        echo "NAMESPACE=${NAMESPACE}" >> $GITHUB_ENV
        echo "IMAGE_TAG_SUFFIX=${BRANCH_NAME}-${COMMIT_SHA}" >> $GITHUB_ENV
        
        echo "## Feature Environment Deployment 🚀" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${COMMIT_SHA}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** \`${NAMESPACE}\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Call Azure Deployment Function
      id: deploy_function
      env:
        FUNCTION_URL: ${{ secrets.AZURE_DEPLOYMENT_FUNCTION_URL }}
        FUNCTION_KEY: ${{ secrets.AZURE_DEPLOYMENT_FUNCTION_KEY }}
        BRANCH_NAME: ${{ env.BRANCH_NAME }}
        COMMIT_SHA: ${{ env.COMMIT_SHA }}
      run: |
        if [ -z "$FUNCTION_URL" ] || [ -z "$FUNCTION_KEY" ]; then
          echo "::error ::Azure Deployment Function URL or Key not set in secrets"
          exit 1
        fi

        echo "🚀 Calling Azure Deployment Function for branch: $BRANCH_NAME"
        echo "Function URL: $FUNCTION_URL"

        # POST request to deployment function
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "$FUNCTION_URL?code=$FUNCTION_KEY" \
          -H "Content-Type: application/json" \
          -d "{\"branch_name\": \"$BRANCH_NAME\", \"commit_sha\": \"$COMMIT_SHA\"}")

        BODY=$(echo "$RESPONSE" | head -n -1)
        STATUS=$(echo "$RESPONSE" | tail -n1)

        echo "📡 HTTP Status: $STATUS"
        echo "📋 Response Body:"
        echo "$BODY" | jq . || echo "$BODY"

        echo "response_body=$BODY" >> $GITHUB_OUTPUT
        echo "http_status=$STATUS" >> $GITHUB_OUTPUT

        if [ "$STATUS" -ne 200 ]; then
          echo "::error ::HTTP request failed with status $STATUS"
          exit 1
        fi

        SUCCESS=$(echo "$BODY" | jq -r '.success // false')
        if [ "$SUCCESS" != "true" ]; then
          ERR_MSG=$(echo "$BODY" | jq -r '.error_details // .message // "Unknown error"')
          echo "::error ::Deployment function reported failure: $ERR_MSG"
          exit 1
        fi

        echo "✅ Deployment function completed successfully"

        # Extract useful fields for later steps
        DEPLOYMENT_URL=$(echo "$BODY" | jq -r '.deployment_url // ""')
        NAMESPACE=$(echo "$BODY" | jq -r '.namespace // ""')
        HEALTH_COUNT=$(echo "$BODY" | jq -r '.health_checks | length // 0')

        echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
        echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
        echo "health_count=$HEALTH_COUNT" >> $GITHUB_OUTPUT
    
    - name: Comment on PR with feature environment details
      if: always() && !failure()
      run: |
        # Get the PR number from the workflow run
        PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number')
        
        if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
          echo "Found PR #$PR_NUMBER for branch $BRANCH_NAME"
          
          # Create comment body
          cat > pr_comment.md << EOF
        ## 🚀 Feature Environment Deployed Successfully
        
        Your feature branch \`$BRANCH_NAME\` has been deployed to its own isolated environment!
        
        ### 🌐 Access Information
        - **Feature URL**: http://$BRANCH_NAME.23.98.101.23.nip.io/  
          _Note: the deployed DNS uses the branch name directly (example: http://ex-c3-e9.23.98.101.23.nip.io/) — it does not include a `feature-` prefix._
        - **Backend Health**: http://$BRANCH_NAME.23.98.101.23.nip.io/be-health
        - **API Documentation**: http://$BRANCH_NAME.23.98.101.23.nip.io/docs/
        - **Namespace**: \`$NAMESPACE\`
        
        ### 📊 Deployment Details
        - **Images**: \`$IMAGE_TAG_SUFFIX\`
        - **Database**: Azure PostgreSQL (provisioned when branch was created)
        - **Infrastructure**: Pre-provisioned by infrastructure workflow
        - **Gateway**: Azure Application Gateway for Containers (AGC)
        - **DNS**: nip.io (automatic DNS resolution)
        
        ### 🧪 Testing
        You can now test your changes in this isolated environment. The environment includes:
        - Full backend API with isolated PostgreSQL database
        - Frontend application
        - Background cron jobs
        - All microservices running with your latest changes
        
        The environment will be automatically cleaned up when this branch is deleted.
        
        ---
        *Deployed by GitHub Actions at $(date -u)*
        EOF
          
          # Post comment to PR
          gh pr comment "$PR_NUMBER" --body-file pr_comment.md
          echo "✅ Posted feature environment details to PR #$PR_NUMBER"
        else
          echo "⚠️ Could not find PR for branch $BRANCH_NAME, skipping comment"
        fi
      env:
        GH_TOKEN: ${{ github.token }}
    
    - name: Generate deployment summary
      run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Results 📊" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ✅ Deployed | \`kubemooc.azurecr.io/todo-app-be:$IMAGE_TAG_SUFFIX\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ✅ Deployed | \`kubemooc.azurecr.io/todo-app-fe:$IMAGE_TAG_SUFFIX\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Cron | ✅ Deployed | \`kubemooc.azurecr.io/todo-app-cron:$IMAGE_TAG_SUFFIX\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Access Information 🌐" >> $GITHUB_STEP_SUMMARY
          DEPLOY_NS="${{ steps.deploy_function.outputs.namespace }}"
          if [ -z "$DEPLOY_NS" ]; then DEPLOY_NS="${NAMESPACE}"; fi
          DEPLOY_URL="${{ steps.deploy_function.outputs.deployment_url }}"
          if [ -z "$DEPLOY_URL" ]; then DEPLOY_URL="http://${BRANCH_NAME}.23.98.101.23.nip.io/"; fi
          HEALTH_COUNT="${{ steps.deploy_function.outputs.health_count }}"
          if [ -z "$HEALTH_COUNT" ]; then HEALTH_COUNT="0"; fi

          echo "**Namespace:** \`$DEPLOY_NS\`" >> $GITHUB_STEP_SUMMARY
          echo "**Feature URL:** $DEPLOY_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Deployed DNS uses the branch name directly (example: http://ex-c3-e9.23.98.101.23.nip.io/) — no leading 'feature-' prefix." >> $GITHUB_STEP_SUMMARY
          echo "**Backend Health:** http://$BRANCH_NAME.23.98.101.23.nip.io/be-health" >> $GITHUB_STEP_SUMMARY
          echo "**API Docs:** http://$BRANCH_NAME.23.98.101.23.nip.io/docs/" >> $GITHUB_STEP_SUMMARY
          echo "**Health Checks:** Parsed $HEALTH_COUNT checks from function response" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps 📝" >> $GITHUB_STEP_SUMMARY
          echo "- Test your feature in the isolated environment" >> $GITHUB_STEP_SUMMARY
          echo "- Run E2E tests against this environment" >> $GITHUB_STEP_SUMMARY
          echo "- Environment will be cleaned up when branch is deleted" >> $GITHUB_STEP_SUMMARY
