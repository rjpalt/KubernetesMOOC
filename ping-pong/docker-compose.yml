version: '3.8'

# Docker Compose configuration for ping-pong and log-output integration
# This setup demonstrates HTTP communication between services

services:
  # Ping-pong service: increments counter and provides HTTP endpoint
  ping-pong:
    image: ping-pong-app:2.5
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ping-pong-app
    environment:
      # Configure ping-pong service
      - PING_PONG_APP_PORT=3000
      - PING_PONG_LOG_LEVEL=INFO
    ports:
      # Expose ping-pong on port 3000
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - ping_pong_network

  # Log-output service: gets ping-pong counter via HTTP and displays with logs
  log-output:
    image: log-output-app:2.5
    build:
      context: ../log_output
      dockerfile: Dockerfile
    container_name: log-output-app
    environment:
      # Configure log-output to communicate with ping-pong via HTTP
      - LOG_APP_PING_PONG_SERVICE_HOST=ping-pong
      - LOG_APP_PING_PONG_SERVICE_PORT=3000
      - LOG_APP_APP_PORT=8000
      - LOG_APP_LOG_LEVEL=INFO
      - LOG_APP_MESSAGE=hello world
    ports:
      # Expose log-output on port 8000
      - "8000:8000"
    depends_on:
      # Start ping-pong first since log-output communicates with it
      - ping-pong
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - ../log_output/config/information.txt:/config/information.txt
    networks:
      - ping_pong_network

networks:
  # Custom network for service communication
  ping_pong_network:
    driver: bridge
