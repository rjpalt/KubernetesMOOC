services:
  todo-app-be:
    image: todo-app-be:4.6-arm64
    build:
      context: ./todo-backend
      dockerfile: Dockerfile
    container_name: todo-app-be
    env_file:
      - docker-compose.env
    environment:
      - PORT=8001
      - POSTGRES_HOST=postgres_prod
      - POSTGRES_PORT=5432
      - NATS_URL=nats://nats:4222
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/be-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - todo-app-network
    depends_on:
      - postgres_prod
      - nats

  todo-app-fe:
    image: todo-app-fe:4.6-arm64
    build:
      context: ./todo-app
      dockerfile: Dockerfile
    container_name: todo-app-fe
    env_file:
      - docker-compose.env
    environment:
      - PORT=8000
      - TODO_BACKEND_URL=http://todo-app-be:8001
    ports:
      - "8000:8000"
    volumes:
      - todo-images:/app/images
    depends_on:
      - todo-app-be
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - todo-app-network

  postgres_prod:
    image: postgres:17
    container_name: postgres_prod
    env_file:
      - docker-compose.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./todo-backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todouser -d todoapp"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - todo-app-network

  todo-cron:
    image: todo-app-cron:4.6-arm64
    build:
      context: ./todo-cron
      dockerfile: Dockerfile
    container_name: todo-cron
    env_file:
      - docker-compose.env
    environment:
      - POSTGRES_HOST=postgres_prod
      - POSTGRES_PORT=5432
      # Set Azure CLI config directory to match mount point
      - AZURE_CONFIG_DIR=/azure-config
    volumes:
      # Mount Azure CLI config to a simple path and set env var to point to it
      - ~/.azure:/azure-config:ro
    depends_on:
      - postgres_prod
    networks:
      - todo-app-network
    # Run as your user to access Azure credentials without permission issues
    user: "${UID:-1000}:${GID:-1000}"
    # Use backup loop mode for local testing
    command: ["/usr/local/bin/backup_database.sh", "loop"]

  # NATS server for message broker
  nats:
    image: nats:2.10-alpine
    container_name: nats
    ports:
      - "4222:4222"  # NATS client port
      - "8222:8222"  # HTTP monitoring port
      - "6222:6222"  # Cluster port
    networks:
      - todo-app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  # Broadcaster service for NATS events
  broadcaster:
    image: broadcaster:4.6-arm64
    build:
      context: ./broadcaster
      dockerfile: Dockerfile
    container_name: broadcaster
    env_file:
      - docker-compose.env
    environment:
      - PORT=8002
      - NATS_URL=nats://nats:4222
      - WEBHOOK_URL=https://httpbin.org/post
      - ENVIRONMENT=local
    ports:
      - "8002:8002"  # Service port
      - "7777:7777"  # Metrics port
    depends_on:
      - nats
    networks:
      - todo-app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  
 # playwright:
 #   image: todo-app-e2e:4.6-arm64
 #   build:
 #     context: ./tests/e2e
 #     dockerfile: Dockerfile
 #   container_name: playwright-e2e
 #   environment:
 #     - E2E_BASE_URL=http://todo-app-fe:8000
 #   volumes:
 #     - ./tests/e2e/test-results:/app/test-results
 #   networks:
 #     - todo-app-network
 #   command: npx playwright test
 #   depends_on:
 #     - todo-app-fe

# Define volumes for image caching
volumes:
  todo-images:
    driver: local
  postgres_data:

networks:
  # Custom network for service communication
  todo-app-network:
    driver: bridge
