# Docker Compose configuration for a log generator and server setup

services:
  # First service: generates logs and writes them to a shared volume
  log-generator:
    image: log-generator:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile.generator
    container_name: log-generator
    environment:
      # Path where logs will be written inside the container
      - LOG_APP_SHARED_LOG_PATH=/shared-data/output.txt
      # Log level for the application
      - LOG_APP_LOG_LEVEL=INFO
    volumes:
      # Mount shared volume for log files
      - shared_logs:/shared-data
    ports:
      # Expose port 8000 for the log generator service
      - "8000:8000"
    healthcheck:
      # Basic health check to ensure the service is responding
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - log_network

  # Second service: reads and serves the logs generated by log-generator
  log-server:
    image: log-server:${TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile.logserver
    container_name: log-server
    environment:
      # Same log path as generator to read the shared log file
      - LOG_APP_SHARED_LOG_PATH=/shared-data/output.txt
      # Log level for the server application
      - LOG_APP_LOG_LEVEL=INFO
    volumes:
      # Mount the same shared volume to read logs
      - shared_logs:/shared-data
    ports:
      # Expose port 8001 for the log server service
      - "8001:8001"
    depends_on:
      # Ensure log-generator starts before log-server
      - log-generator
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - log_network

volumes:
  # Shared volume for log files between generator and server
  shared_logs:
    driver: local

networks:
  # Custom network for service communication
  log_network:
    driver: bridge
